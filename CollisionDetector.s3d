class CollisionDetector{
	var ambientSpaceshipNum;
	var enemyFighterNum;
	
	CollisionDetector(aNum, eNum);
	checkCollisionBBox(myFighter, enemyArray, ambientArray);
	checkCollisionDeep(myFighter, shipObj);
};

function CollisionDetector::CollisionDetector(aNum, eNum){
	ambientSpaceshipNum = aNum;
	enemyFighterNum = eNum;
}

function CollisionDetector::checkCollisionBBox(myFighter, enemyArray, ambientArray){
	var changed = false;
	var myFighterObj = myFighter.getObject();
	var aliveBeamsNum = myFighter.getAliveBeamsNum();
	var aliveBeams = myFighter.getAliveBeams();							//array con gli indici dei bullet vivi
	for (var i = 0; i < enemyFighterNum; i++) {
		if (enemyArray[i] != void) {
			if(myFighterObj.isCollidingBBox(enemyArray[i].getObject())){
				myFighter.setCollision(true); 
				changed = true;
			}
			for(var j = 0; j<aliveBeamsNum; j++){
				var beam = myFighter.getBeam(AliveBeams[j]);
				if(beam.isCollidingBBox(enemyArray[i].getObject())){
					//TODO: gestisci la hit dei nemici
					beam.setCollided();
				}
			}
		}
	}
	for (var i = 0; i < ambientSpaceshipNum; i++) {
		if (ambientArray[i] != void ) {
			var shipObj = ambientArray[i].getObject();
			if(myFighterObj.isCollidingBBox(shipObj)){
				if(ambientArray[i].isDestroyable()){
					ambientArray[i].setCollision(true);
				}
				else{
					changed = changed || checkCollisionDeep(myFighter, shipObj);
				}
			}
			for(var j = 0; j<aliveBeamsNum; j++){
				var beam = myFighter.getBeam(AliveBeams[j]);
				if(beam.isCollidingBBox(shipObj)){
					ambientArray[i].setCollision(true);
					beam.setCollided();
				}
			}
		}
	}
	if(!changed){
		myFighter.setCollision(false);
	}
}

function CollisionDetector::checkCollisionDeep(myFighter, shipObj){
	var pos = myFighter.getPosition();
	for(var j = 0; j < 6; j+=2){
		if(shipObj.isColliding(pos+myFighter.getCollVertex()[j+1],pos+myFighter.getCollVertex()[j])){
			myFighter.setCollision(true); 
			//myFighter.setCollisionInfo(collisionInfo);
			return true;
		}
	}
	return false;
}
