class CollisionDetector{
	var ambientSpaceshipNum;
	var enemyFighterNum;
	var network;
	
	CollisionDetector(aNum, eNum, net);
	checkCollisionBBox(myFighter, enemyArray, ambientArray);
	checkCollisionDeep(myFighter, shipObj);
};

function CollisionDetector::CollisionDetector(aNum, eNum, net) {
	ambientSpaceshipNum = aNum;
	enemyFighterNum = eNum;
	network = net;
}

function CollisionDetector::checkCollisionBBox(myFighter, enemyArray, ambientArray){
	var changed = false;
	var ObjectUnderTest = myFighter.getObject();
	for (var i = 0; i < enemyFighterNum; i++) {
		if (enemyArray[i] != void) {
			if(ObjectUnderTest.isCollidingBBox(enemyArray[i].getObject())){
				myFighter.setCollision(true); //.colliding = true; fa la stessa cosa
				changed = true;
			}
		}
	}
	for (var i = 0; i < ambientSpaceshipNum; i++) {
		if (ambientArray[i] != void ) {
			var shipObj = ambientArray[i].getObject();
			if(ObjectUnderTest.isCollidingBBox(shipObj)) {
				if(ambientArray[i].isDestroyable()) {
					ambientArray[i].setCollision(true);
					network.sendAmbientDestroyData(i, -1);
				} else {
					changed = changed || checkCollisionDeep(myFighter, shipObj);
				}
			}
		}
	}
	if(!changed) {
		myFighter.setCollision(false);
	}
}

function CollisionDetector::checkCollisionDeep(myFighter, shipObj) {
	var pos = myFighter.getPosition();
	for(var j = 0; j < 6; j+=2) {
		if(shipObj.isColliding(pos+myFighter.getCollVertex()[j+1],pos+myFighter.getCollVertex()[j])) {
			myFighter.setCollision(true); 
			//myFighter.setCollisionInfo(collisionInfo);
			return true;
		}
	}
	return false;
}
