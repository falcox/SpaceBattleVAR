/* Include s3d symbols */
#include <Script3d.h>
#include <Camera.s3d.h>
#include <MeshFactory.s3d>
#include <Networker.s3d>
#include <UserInput.s3d>
#include <Xwing.s3d>
#include <TieFighter.s3d>
#include <Ywing.s3d>
#include <Arc170.s3d>
#include <MillenniumFalcon.s3d>
#include <EmperorShuttle.s3d>
#include <EscapePod.s3d>

#define AMBIENT_SPACESHIP_NUM 10
#define TIMER_MSEC_TICK 100
#define FRAMERATE 60

/* Set global scene parameters */
SET SCENE_FOV  = 60;
SET SCENE_NEAR = 0.5;
SET SCENE_FAR  = 1000;

var myFighter;
var networkController =  void;
var userInputController;
var enemiesFighter = Array(ENEMIES_FIGHTER_NUM);
var ambientSpaceship = Array(AMBIENT_SPACESHIP_NUM);
var meshes;

/* Function declarations */
function DrawGrid(col, size);

function OnDownload()
{
	FileDownload("3d_models/Xwing.zip");
	FileDownload("3d_models/Tie_2.zip");
	FileDownload("3d_models/ywing.zip");
	FileDownload("3d_models/arc170.zip");
	FileDownload("3d_models/millennium_falcon.zip");
	FileDownload("3d_models/emperor_shuttle.zip");
	FileDownload("3d_models/EscapePod.zip");
}

function OnInit(params)
{
	networkController = Networker();
	
	userInputController = UserInput();
	
	meshes = MeshFactory();
	
	myFighter = Xwing( meshes );
	myFighter.useCamera(true);
	myFighter.setPosition([ 50, 0, 0 ]);
	
	ambientSpaceship[0] = EmperorShuttle( meshes );
	ambientSpaceship[0].setCenter([200.0, 0, 0]);
	ambientSpaceship[0].setRadius(100);
	ambientSpaceship[0].setOrbitPeriod(20);
	ambientSpaceship[0].setServerTime(GetTime());
	
	/*ambientSpaceship[1] = EscapePod();
	ambientSpaceship[1].init();
	ambientSpaceship[1].setPosition([100.0, 50.0, 0.0]);*/
	
	/*---Global XVR parameters---*/
	SetFrameRate(FRAMERATE);	
	SetTimeStep(TIMER_MSEC_TICK);

	Outputln("START!");
}

function OnFrame()
{
	userInputController.userControlFighter(myFighter);
	
	if (networkController != void) {
		networkController.sendFighterData(myFighter.getFighterData());
	}
	
	SceneBegin();

	DrawGrid([0.5, 0.5, 0.5], 10000);

	/*---here we draw our fighter---*/
	myFighter.update();
	myFighter.draw();
	
	/*---here we draw all enemies fighter---*/
	for (var i = 0; i < ENEMIES_FIGHTER_NUM; i++) {
		if (enemiesFighter[i] != void) {
			enemiesFighter[i].update();
			enemiesFighter[i].draw();
		}
	}
	/*---here we draw all ambient spaceships---*/
	for (var i = 0; i < AMBIENT_SPACESHIP_NUM; i++) {
		if (ambientSpaceship[i] != void) {
			ambientSpaceship[i].update();
			ambientSpaceship[i].draw();
		}
	}
	
	SceneEnd();
}

function DownloadReady(RequestID)
{
	// TODO
}

function OnTimer()
{
	if (networkController != void) {
		networkController.poll();
	}
}

function OnEvent(eventID, wparam, lparam){
	if (networkController != void) {
		if (eventId == networkController.isIdEvent()) {
			Outputln(Sprintf("GET ID: %d", wparam));
		}
		if (eventId == networkController.isEnemyDataEvent()) {
			var id = wparam[0];
			var type = wparam[1];
			if (enemiesFighter[id] == void) {
				if (type == XWING_TYPE) { /* xwing */
					enemiesFighter[id] = Xwing( meshes );
				} else {
					Outputln("Error! fighter type does not exists!");
					return;
				}
			}
			enemiesFighter[id].setPosition([wparam[2], wparam[3], wparam[4]]);
			enemiesFighter[id].setAngle(wparam[5], wparam[6], wparam[7]);
			enemiesFighter[id].setSpeed(wparam[8]);
			enemiesFighter[id].setAnimationFrame(wparam[9]);
		}
		if (eventId == networkController.isEnemyExitEvent()) {
			enemiesFighter[wparam] = void;
			Outputln(Sprintf("Player %d is gone!",wparam));
		}
	}
}

function OnError(){
	// TODO: put your errors handling code here
}

function OnExit()
{
	// TODO: put your cleanup code here
	EraseCache();
}

function DrawGrid(col, size)
{
	/* let's not mess up current OpenGL status */
	glPushAttrib(GL_LIGHTING_BIT | GL_LINE_BIT | GL_CURRENT_BIT);
	
	glLineWidth(1);
	glDisable(GL_LIGHTING);
	glColor(col);
	var max = size / 2.0;
	var min = -max;	
	var step = size / 100.0;
	
	glBegin(GL_LINES);
		for (var i = min; i <= max; i += step)
		{
			glVertex(i, 0, max);
			glVertex(i, 0, min);
			
			glVertex(max, 0, i);
			glVertex(min, 0, i);
		}
	glEnd();
	
	/* polite restoration of previous OpenGL status */
	glPopAttrib();
}
