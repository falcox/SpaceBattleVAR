#define AMBIENT_SPACESHIP_NUM 10
#define TIMER_MSEC_TICK 15
#define FRAMERATE 60
#define RED_LIGHT	0
#define GREEN_LIGHT	1
#define WHITE_LIGHT 2
#define BOUND_VOLUME_X	5000
#define BOUND_VOLUME_Y	2500
#define BOUND_VOLUME_Z	5000
#define FAR_PLANE		4000
#define RATIO_H			9.0
#define RATIO_W			16.0

#define GAME_MODE_MENU		0
#define GAME_MODE_SELECTED	1
#define GAME_MODE_WAIT_ID	2
#define GAME_MODE_PLAY		3

//#define DEBUGGING

/* Include s3d symbols */
#include <Script3d.h>
#include <Camera.s3d.h>
#include <ResourceFactory.s3d>
#include <Networker.s3d>
#include <UserInput.s3d>
#include <Xwing.s3d>
#include <TieFighter.s3d>
#include <TieInterceptor.s3d>
#include <Ywing.s3d>
#include <Arc170.s3d>
#include <MillenniumFalcon.s3d>
#include <EmperorShuttle.s3d>
#include <StarDestroyer.s3d>
#include <DeathStar.s3d>
#include <Frigate.s3d>
#include <EscapePod.s3d>
#include <SkyBox.s3d>
#include <Radar.s3d>
#include <CollisionDetector.s3d>
#include <AmbientEngine.s3d>
#include <LightEngine.s3d>
#include <Hud.s3d>

/* Set global scene parameters */
SET SCENE_FOV  = 90;
SET SCENE_NEAR = 0.5;
SET SCENE_FAR  = 5000;

var myFighter;
var networkController =  void;
var collider;
var userInputController;
var ambientController;
var enemiesFighter = Array(ENEMIES_FIGHTER_NUM);
var ambientSpaceship = Array(AMBIENT_SPACESHIP_NUM);
var spawningPoints = Array(ENEMIES_FIGHTER_NUM + 1);
var resources;
var myLightEngine;
var mySkyBox;
var myRadar;
var myHud;
var gameMode;
var easterEgg;
var starting_time;


/* Function declarations */
function DrawGrid(col, size);
function DrawWorldBounds();
function CameraMoveMouse();
function respawn(fighter);

function OnDownload()
{
	FileDownload("3d_models/Xwing.zip");
	FileDownload("3d_models/Tie_2.zip");
	FileDownload("3d_models/TieInterceptor.zip");
	FileDownload("3d_models/ywing.zip");
	FileDownload("3d_models/arc170.zip");
	FileDownload("3d_models/millennium_falcon.zip");
	FileDownload("3d_models/emperor_shuttle.zip");
	FileDownload("3d_models/EscapePod.zip");
	FileDownload("3d_models/DeathStar4.zip");
	FileDownload("3d_models/Frigate.zip");
	FileDownload("3d_models/StarDestroyer3.zip");
	FileDownload("images/spacebackgrounds.zip");
	FileDownload("images/billboards.zip");
	FileDownload("avi/explosion.zip");
	FileDownload("sounds/sounds.zip");
	FileDownload("sounds/music.zip");
}

function OnInit(params)
{
	glEnable(GL_NORMALIZE);
	
#ifdef DEBUGGING
	CameraGetCurrent().SetPosition([0, 0, 100]);
#endif
	networkController = Networker();
	
	userInputController = UserInput();
	
	collider = CollisionDetector(AMBIENT_SPACESHIP_NUM, ENEMIES_FIGHTER_NUM, networkController);
	
	resources = ResourceFactory();
	
	myLightEngine = LightEngine();
	ambientController = AmbientEngine(networkController, resources);
	
	myFighter = Xwing( resources, myLightEngine );
#ifdef DEBUGGING
	myFighter.useCamera(false);
#else
	myFighter.useCamera(true);
#endif
	myFighter.setPosition([ 0, 0, 0 ]);

	myFighter.addNetwork(networkController);
	
	mySkyBox = SkyBox();
	mySkyBox.init();

	myRadar = Radar(myFighter, ambientSpaceship, enemiesFighter);
	myHud = Hud(myFighter);
	
	MMMp3.Load("the-battle-of-yavin.mp3");
	MMMp3.SetVolume(0.2);
	MMMp3.Play(true);
	
	gameMode = GAME_MODE_MENU;
	easterEgg = 0;
	/*---Global XVR parameters---*/
	SetFrameRate(FRAMERATE);	
	SetTimeStep(TIMER_MSEC_TICK);

	Outputln("START!");
}

function OnFrame()
{
	SceneBegin();
#ifdef DEBUGGING
	CameraMoveMouse();
#endif
	DrawWorldBounds();
	/*---here we draw our fighter---*/
	mySkyBox.draw();
	
	if (myFighter.draw() == false) {
		myFighter.resetFighter();
		respawn(myFighter);
	}
	
	/*---here we draw all enemies fighter---*/
	for (var i = 0; i < ENEMIES_FIGHTER_NUM; i++) {
		if (enemiesFighter[i] != void) {
			if (enemiesFighter[i].draw() == false) {
				//enemiesFighter[i].resetFighter();
				enemiesFighter[i] = void;
			}
		}
	}
	/*---here we draw all ambient spaceships---*/
	for (var i = 0; i < AMBIENT_SPACESHIP_NUM; i++) {
		if (ambientSpaceship[i] != void) {
			if (ambientSpaceship[i].draw() == false) {
				ambientSpaceship[i] = void;
			}
		}
	}
	
	myRadar.draw();
	
	myHud.draw(myFighter);
	
	myLightEngine.update();
	
	SceneEnd();

}

function DownloadReady(RequestID)
{
	// TODO
}

function OnTimer()
{
	if (gameMode == GAME_MODE_PLAY) {
		userInputController.userControlFighter(myFighter);
		if (networkController != void) {
			networkController.poll();
			networkController.sendFighterData(myFighter.getFighterData(), false);
		}
	
		ambientController.tick(ambientSpaceship);
		
		myFighter.update();	
		for (var i = 0; i < ENEMIES_FIGHTER_NUM; i++) {
			if (enemiesFighter[i] != void) {
				enemiesFighter[i].update();
			}
		}
		for (var i = 0; i < AMBIENT_SPACESHIP_NUM; i++) {
			if (ambientSpaceship[i] != void) {
				ambientSpaceship[i].update();
			}
		}
		mySkyBox.update(myFighter.getPosition(), myFighter.getAngles());
		myRadar.update(myFighter, ambientSpaceship, enemiesFighter);
		
		collider.checkCollisionBBox(myFighter, enemiesFighter, ambientSpaceship);
		
	} else if (gameMode == GAME_MODE_MENU) {
		/* Network controller must work either in menu mode to fetch the id */
		networkController.poll();
		myFighter.setSpeed(0);
		myFighter.update();
		mySkyBox.update(myFighter.getPosition(), myFighter.getAngles());
		myHud.setScreenMessage("<- Select your ship ->", true);
		var command = userInputController.userControlGameMenu();
		var type;
		var changedFighter;
		switch (command) {
			case 1:
			case 2:
				if (command == 1) {
					type = (myFighter.FighterType - 1) % 5;
					if (type < 0) {
						type = 4;
					}
				} else {
					type = (myFighter.FighterType + 1) % 5;
				}
				if (type == XWING_TYPE) { /* xwing */
					changedFighter = Xwing( resources, myLightEngine );
				} else if (type == TIE_TYPE) { /* tie */
					changedFighter = TieFighter( resources, myLightEngine );
				} else if (type == YWING_TYPE) { /* ywing */
					changedFighter = Ywing( resources, myLightEngine );
				} else if (type == ARC170_TYPE) { /* arc170 */
					changedFighter = Arc170( resources, myLightEngine );
				} else if (type == INTERCEPTOR_TYPE) { /* interceptor */
					changedFighter = TieInterceptor( resources, myLightEngine );
				}
				#ifdef DEBUGGING
					changedFighter.useCamera(false);
				#else
					changedFighter.useCamera(true);
				#endif
				changedFighter.setPosition(myFighter.getPosition());
				changedFighter.addNetwork(networkController);
				myFighter = changedFighter;
				easterEgg = 0;
			break;
			case 3:
				gameMode = GAME_MODE_SELECTED;
			break;
			case 4:
				easterEgg++;
			break;
		}
	} else if (gameMode == GAME_MODE_SELECTED) {
		gameMode = GAME_MODE_WAIT_ID;
		/* EASTER EGG */
		if(easterEgg == 5) {
			myFighter = MillenniumFalcon( resources, myLightEngine );
			myFighter.useCamera(true);
			myFighter.addNetwork(networkController);
			MMMp3.Stop();
			MMMp3.Load("galactic-empire.mp3");
			MMMp3.SetVolume(0.2);
			MMMp3.Play(true);
		}
		myHud.setScreenMessage("Waiting the server!", true);
		myHud.appendMessage("Fighter selected, waiting the server!", true);
	} else if (gameMode == GAME_MODE_WAIT_ID) {
		/* Network controller must work either in menu mode to fetch the id */
		networkController.poll();
		var id = networkController.getId();
		if (id >= 0) {
			gameMode = GAME_MODE_PLAY;
			/* Create main ambient object */
			ambientSpaceship[0] = DeathStar( resources );
			ambientSpaceship[0].setCenter([0, 0, 0]);
			ambientSpaceship[0].setRadius(0);
			ambientSpaceship[0].setOrbitPeriod(500.0);
			ambientSpaceship[0].setServerTime(GetTime());
			ambientSpaceship[1] = StarDestroyer( resources );
			ambientSpaceship[1].setCenter([2500, 0, 0]);
			ambientSpaceship[1].setRadius(500);
			ambientSpaceship[1].setOrbitPeriod(5000.0);
			ambientSpaceship[1].setServerTime(GetTime());
			ambientSpaceship[2] = Frigate( resources );
			ambientSpaceship[2].setCenter([-2500, -4000, -2500]);
			ambientSpaceship[2].setRadius(250);
			ambientSpaceship[2].setOrbitPeriod(300.0);
			ambientSpaceship[2].setServerTime(GetTime());
			respawn(myFighter);
			myHud.resetHud();
			myHud.appendMessage(Sprintf("You are player: %d", id), true);
			myHud.setHudByFighter(myFighter);
			myHud.setScreenMessage("May the force be with you!", false);
		}
	}
}

function OnEvent(eventID, wparam, lparam){
	if (networkController != void) {
		if (eventId == networkController.isEnemyDataEvent() && gameMode == GAME_MODE_PLAY) {
			var id = wparam[0];
			var type = wparam[1];
			if (enemiesFighter[id] == void) {
				/* New player has joined the game! Share ambient object! */
				ambientController.advertise(ambientSpaceship);
				
				networkController.sendFighterData(myFighter.getFighterData(), true);

				if (type == XWING_TYPE) { /* xwing */
					enemiesFighter[id] = Xwing( resources, myLightEngine );
				} else if (type == TIE_TYPE) { /* tie */
					enemiesFighter[id] = TieFighter( resources, myLightEngine );
				} else if (type == YWING_TYPE) { /* ywing */
					enemiesFighter[id] = Ywing( resources, myLightEngine );
				} else if (type == ARC170_TYPE) { /* arc170 */
					enemiesFighter[id] = Arc170( resources, myLightEngine );
				} else if (type == MILLFALC_TYPE) { /* millennium falcon */
					enemiesFighter[id] = MillenniumFalcon( resources, myLightEngine );
				} else if (type == INTERCEPTOR_TYPE) { /* interceptor */
					enemiesFighter[id] = TieInterceptor( resources, myLightEngine );
				} else {
					Outputln("Error! fighter type does not exists!");
					return;
				}
			}
			enemiesFighter[id].setPosition([wparam[2], wparam[3], wparam[4]]);
			enemiesFighter[id].setAngle(wparam[5], wparam[6], wparam[7]);
			enemiesFighter[id].setSpeed(wparam[8]);
			enemiesFighter[id].setAnimationFrame(wparam[9]);
			enemiesFighter[id].setCurrentLife(wparam[10]);
		} else
		if (eventId == networkController.isLaserBeamEvent() && gameMode == GAME_MODE_PLAY) {
			var player = wparam[0];
			var ipos = [wparam[1], wparam[2], wparam[3]];
			var epos = [wparam[4], wparam[5], wparam[6]];
			var serverTime = wparam[7];
			var dmg = wparam[8];
			if (enemiesFighter[player] != void) {
				enemiesFighter[player].addBeam(ipos, epos, serverTime, dmg);
			}
		} else
		if (eventId == networkController.isEnemyExitEvent() && gameMode == GAME_MODE_PLAY) {
			enemiesFighter[wparam] = void;
			myHud.appendMessage(Sprintf("Player %d is gone!",wparam), false);
		} else
		if (eventId == networkController.isAmbientDestroyEvent() && gameMode == GAME_MODE_PLAY) {
			//[ambientId, sender_playerId, ambientType]
			if (networkController.isServer()) {
				if (wparam[1] != networkController.getId() && ambientSpaceship[ wparam[0] ] != void && ambientSpaceship[ wparam[0] ].getAmbientType() == wparam[2]) {
					networkController.sendAmbientDestroyData(wparam[0], wparam[1], wparam[2]);
				}
			}
			if (wparam[1] == networkController.getId()) {
				/* The server sent me this packet with my id so I destroyed this ambient object, take reward */
				switch(wparam[2]) {
					case ESCAPE_POD:
						myFighter.setCurrentLife(100.0);
						// TODO: scrivere qualche frase migliore...
						myHud.appendMessage("Ricevuta vita extra!", false);
					break;
					case EMPEROR_SHUTTLE:
						myFighter.setCurrentBattery(100.0);
						myHud.appendMessage("Ricevuta energia extra!", false);
					break;
				}
			}
			if (ambientSpaceship[ wparam[0] ] != void && !ambientSpaceship[ wparam[0] ].isCollided()) {
				ambientSpaceship[ wparam[0] ].setCollision(true);
			}
		} else
		if (eventId == networkController.isAmbientDataEvent() && gameMode == GAME_MODE_PLAY) {
			var id = wparam[0];
			var type = wparam[1];
			if (ambientSpaceship[id] == void) {
				if (type == ESCAPE_POD) {
					ambientSpaceship[id] = EscapePod( resources );
				} else if (type == EMPEROR_SHUTTLE) { 
					ambientSpaceship[id] = EmperorShuttle( resources );
				} else if (type == STAR_DESTROYER) { 
					ambientSpaceship[id] = StarDestroyer( resources );
				} else if (type == REBELLION_FRIGATE) { 
					ambientSpaceship[id] = Frigate( resources );
				} else {
					Outputln("Error! Ambient type does not exists!");
					return;
				}
				ambientSpaceship[id].setCenter([ wparam[2], wparam[3], wparam[4] ]);
				ambientSpaceship[id].setRadius(wparam[5]);
				ambientSpaceship[id].setOrbitPeriod(wparam[6]);
				ambientSpaceship[id].setServerTime(wparam[7]);
				// TODO: scrivere qualche frase migliore...
				myHud.appendMessage("Avvistata navicella!", false);
			} else if (networkController.isServer()) {
				/* If we are server we don't receive the ambient packet, so an event is generated by the 
				 * networker in the sendAmbientData and the data is: [ambientId, ambientType]
				 */
				// TODO: scrivere qualche frase migliore...
				myHud.appendMessage("Avvistata navicella!", false);
			}
		} else
		if (eventId == networkController.isFighterDestroyedEvent() && gameMode == GAME_MODE_PLAY) {
			// [dead_playerId, killer_playerId]
			if (wparam[0] != networkController.getId()) {
				enemiesFighter[ wparam[0] ].setDestroyed(true);
			} else {
				myHud.increaseDeathCounter(wparam[1]);
				myHud.setScreenMessage("You are death!", false);
			}
			if (wparam[1] == networkController.getId()) {
				myHud.increaseKillCounter(wparam[0]);
				myHud.setScreenMessage("Good kill!", false);
			}
		} else
		if (eventId == networkController.isIdEvent()) {
			if (wparam != -2) {
				ambientController.start();
				myHud.resetHud();
				myHud.appendMessage(Sprintf("You are player: %d", wparam), true);
			} else {
				//TODO: errore troppi giocatori
				myHud.resetHud();
				myHud.appendMessage(sprintf("Too many players!"), true);
			}
		}
	}
}

function OnError(){
	// TODO: put your errors handling code here
}

function OnExit()
{
	// TODO: put your cleanup code here
	EraseCache();
}

function CameraMoveMouse()
{	

	CameraMoveMouse_MBL_LC();

}


function DrawGrid(col, size)
{
	/* let's not mess up current OpenGL status */
	glPushAttrib(GL_LIGHTING_BIT | GL_LINE_BIT | GL_CURRENT_BIT);
	
	glLineWidth(1);
	glDisable(GL_LIGHTING);
	glColor(col);
	var max = size / 2.0;
	var min = -max;	
	var step = size / 100.0;
	
	glBegin(GL_LINES);
		for (var i = min; i <= max; i += step)
		{
			glVertex(i, 0, max);
			glVertex(i, 0, min);
			
			glVertex(max, 0, i);
			glVertex(min, 0, i);
		}
	glEnd();
	
	/* polite restoration of previous OpenGL status */
	glPopAttrib();
}

function DrawWorldBounds(){
	glPushAttrib(GL_LIGHTING_BIT | GL_LINE_BIT | GL_CURRENT_BIT);
	
	glLineWidth(1);
	glDisable(GL_LIGHTING);
	glColor([0.5, 0.5, 0.5]);
//	var max = BOUND_VOLUME_X;
//	var min = -max;	
	var step = 100.0;
	
	glBegin(GL_LINES);
	for (var i = -BOUND_VOLUME_X; i <= BOUND_VOLUME_X; i += step)
		{
			glVertex(i, BOUND_VOLUME_Y, BOUND_VOLUME_Z);
			glVertex(i, BOUND_VOLUME_Y, -BOUND_VOLUME_Z);
			
			glVertex(i, -BOUND_VOLUME_Y, BOUND_VOLUME_Z);
			glVertex(i, -BOUND_VOLUME_Y, -BOUND_VOLUME_Z);
			
			glVertex(i, BOUND_VOLUME_Y, BOUND_VOLUME_Z);
			glVertex(i, -BOUND_VOLUME_Y, BOUND_VOLUME_Z);
			
			glVertex(i, BOUND_VOLUME_Y, -BOUND_VOLUME_Z);
			glVertex(i, -BOUND_VOLUME_Y, -BOUND_VOLUME_Z);
		}
	for (var i = -BOUND_VOLUME_Y; i <= BOUND_VOLUME_Y; i += step)
		{
			glVertex(BOUND_VOLUME_X,i,BOUND_VOLUME_Z);
			glVertex(BOUND_VOLUME_X,i,-BOUND_VOLUME_Z);
			
			glVertex(-BOUND_VOLUME_X,i,BOUND_VOLUME_Z);
			glVertex(-BOUND_VOLUME_X,i,-BOUND_VOLUME_Z);
			
			glVertex(BOUND_VOLUME_X,i,BOUND_VOLUME_Z);
			glVertex(BOUND_VOLUME_X,i,BOUND_VOLUME_Z);
			
			glVertex(BOUND_VOLUME_X,i,BOUND_VOLUME_Z);
			glVertex(-BOUND_VOLUME_X,i,BOUND_VOLUME_Z);
			
			glVertex(BOUND_VOLUME_X,i,-BOUND_VOLUME_Z);
			glVertex(-BOUND_VOLUME_X,i,-BOUND_VOLUME_Z);
		}
		
	for (var i = -BOUND_VOLUME_Z; i <= BOUND_VOLUME_Z; i += step)
		{
			glVertex(BOUND_VOLUME_X, BOUND_VOLUME_Y, i);
			glVertex(BOUND_VOLUME_X, -BOUND_VOLUME_Y, i);
			
			glVertex(-BOUND_VOLUME_X, BOUND_VOLUME_Y, i);
			glVertex(-BOUND_VOLUME_X, -BOUND_VOLUME_Y, i);
			
			glVertex(BOUND_VOLUME_X, BOUND_VOLUME_Y, i);
			glVertex(-BOUND_VOLUME_X, BOUND_VOLUME_Y, i);
			
			glVertex(BOUND_VOLUME_X, -BOUND_VOLUME_Y, i);
			glVertex(-BOUND_VOLUME_X, -BOUND_VOLUME_Y, i);
		}
	glEnd();
	
	/* polite restoration of previous OpenGL status */
	glPopAttrib();
}

function respawn(fighter)
{
	//TODO: respawn da uno degli 8 vertici
	var posx = rand(BOUND_VOLUME_X) * ((Rand(1)==0)?1:-1);
	var posy = rand(BOUND_VOLUME_Y) * ((Rand(1)==0)?1:-1);
	var posz = rand(BOUND_VOLUME_Z) * ((Rand(1)==0)?1:-1);
	
	//fighter.SetPosition([posx, posy, posz]);
	fighter.SetPosition([1700+Rand(200), 0, 0]);
	//fighter.SetPosition([0, 0, 0]);
}
