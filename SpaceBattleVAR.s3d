/* Include s3d symbols */
#include <Script3d.h>
#include <Camera.s3d.h>
#include <Xwing.s3d>
#include <TieFighter.s3d>
#include <EscapePod.s3d>

/* Set global scene parameters */
SET SCENE_FOV  = 60;
SET SCENE_NEAR = 0.5;
SET SCENE_FAR  = 1000;

var myXwing;
var enemiesFighter;

var TieObj;
var PodObj;
var TiePos = [0.0, 10.0, 0.0];

/* Function declarations */
function CameraMoveMouse();
function DrawGrid(col, size);

function OnDownload()
{
	FileDownload("3d_models/Xwing.zip");
	FileDownload("3d_models/Tie_2.zip");
	FileDownload("3d_models/EscapePod.zip");
}

function OnInit(params)
{
	myXwing = Xwing();
	myXwing.init();
	
	TieObj = TieFighter();
	TieObj.init();
	TieObj.setPosition(TiePos);
	
	PodObj = EscapePod();
	PodObj.init();
}

function OnFrame()
{
	/* manage camera */
	//CameraMoveMouse();
	
	SceneBegin();

	DrawGrid([0.5, 0.5, 0.5], 1000);

	// TODO: put your drawing code here
	
	myXwing.update();
	myXwing.draw();
	
	/*DEBUG
	trace(myXwing.psi);
	trace(sin((myXwing.psi)*GRAD_TO_RAD));
	trace(myXwing.direction);
	 ---- */
	TieObj.draw();
	PodObj.draw();
	
	SceneEnd();
}

function DownloadReady(RequestID)
{
	// TODO
}

function OnTimer()
{
	// TODO:
}

function OnEvent(eventID, wparam, lparam){
	// TODO: put your events handling code here
}

function OnError(){
	// TODO: put your errors handling code here
}

function OnExit()
{
	// TODO: put your cleanup code here
	EraseCache();
}

function CameraMoveMouse()
{	
	CameraMoveMouse_MBL_LC();
}

function DrawGrid(col, size)
{
	/* let's not mess up current OpenGL status */
	glPushAttrib(GL_LIGHTING_BIT | GL_LINE_BIT | GL_CURRENT_BIT);
	
	glLineWidth(1);
	glDisable(GL_LIGHTING);
	glColor(col);
	var max = size / 2.0;
	var min = -max;	
	var step = size / 10.0;
	
	glBegin(GL_LINES);
		for (var i = min; i <= max; i += step)
		{
			glVertex(i, 0, max);
			glVertex(i, 0, min);
			
			glVertex(max, 0, i);
			glVertex(min, 0, i);
		}
	glEnd();
	
	/* polite restoration of previous OpenGL status */
	glPopAttrib();
}
