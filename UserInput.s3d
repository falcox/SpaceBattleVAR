class UserInput {
	var cameraModeAntiBounce;
	
	init();
	userControlFighter(obj);
};

function UserInput::init()
{
	cameraModeAntiBounce = false;
}

/* fighter object must implements those function:
 * 		- increaseSpeed()
 * 		- decreaseSpeed()
 * 		- changeCameraMode()
 * 		- setRelativeAngle(roll, pitch, yaw)
 */
function UserInput::userControlFighter(fighter)
{
	var y = 0, p = 0, r = 0;
	/* changedOccurred is set true only if a command modifies the fighter pose or velocity */
	var changedOccurred = false;
	
	/*---modifiche al vettore velocità e al frame---*/
	//TODO: in questo momento questo pezzo di codice modifica changedOccurred a seconda
	//		della posizione del codice stesso, non va tanto bene...
	if(keypressed(VK_CONTROL)) {
		changedOccurred = fighter.increaseSpeed();
	} else {
		changedOccurred = fighter.decreaseSpeed();
	}
	
	/*---modifiche agli angoli--- */
	if(Keypressed(VK_LEFT) || Keypressed("a")) {
		r = -ANGLE_STEP;
		changedOccurred = true;
	} else if(Keypressed(VK_RIGHT) || Keypressed("d")) {
		r = ANGLE_STEP;
		changedOccurred = true;
	}
	if(Keypressed(VK_UP) || Keypressed("w")) {
		p = ANGLE_STEP;
		changedOccurred = true;
	} else if(Keypressed(VK_DOWN) || Keypressed("s")) {
		p = -ANGLE_STEP;
		changedOccurred = true;
	}
	if(Keypressed(VK_RSHIFT) || Keypressed("q")) {
		y = ANGLE_STEP;
		changedOccurred = true;
	} else if(Keypressed(VK_END) || Keypressed("e")) {
		y = -ANGLE_STEP;
		changedOccurred = true;
	}
	/*---Modify camera mode---*/
	if(Keypressed("c")) {
		cameraModeAntiBounce = true;
	} else if (cameraModeAntiBounce == true) {
		fighter.changeCameraMode();
		cameraModeAntiBounce = false;
	}

	/*---rotazione oggetto---*/
	fighter.setRelativeAngle(r, p, y);
	
	return changedOccurred;
}