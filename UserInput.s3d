#define SHOOT_RATE	100
#define MOUSE_STEP 	0.001
#define DELTA_X_MAX	385
#define DELTA_Y_MAX	220
#define X_MAX 		1530
#define Y_MAX		800
#define ALPHA		0.5

class UserInput {
	var cameraModeAntiBounce;
	var fireBeamAntiBounce;
	var lastDX;
	var lastDY;
	
	UserInput();
	userControlFighter(fighter);
	userControlGameMenu();
};

function UserInput::UserInput()
{
	lastDX = 0;
	lastDY = 0;
	cameraModeAntiBounce = false;
	fireBeamAntiBounce = false;
}

/* fighter object must implements those function:
 * 		- increaseSpeed()
 * 		- decreaseSpeed()
 * 		- changeCameraMode()
 * 		- getAngleStep()
 * 		- setRelativeAngle(roll, pitch, yaw)
 */
function UserInput::userControlFighter(fighter)
{
	static var time = GetTime();
	static var fastShoot = 0;
	var dx = Mouse.deltaX;
	var dy = Mouse.deltaY;
	var mx = Mouse.X;
	var my = Mouse.Y;
	var lButton = Mouse.ButtonL;
	consoletext(0.01,0.01,sprintf("deltaX: %d, X: %d, deltaY: %d, Y: %d",dx,mx,dy,my));
//	outputln(sprintf("deltaX: %d, X: %d, deltaY: %d, Y: %d",dx,mx,dy,my));
	var y = 0, p = 0, r = 0;
	var angleStep = fighter.getAngleStep();
	fastShoot += GetTime() - time;
	/*---modifiche al vettore velocità e al frame---*/
	if(keypressed(VK_LSHIFT)) {
		fighter.increaseSpeed();
	} else {
		fighter.decreaseSpeed();
	}
	
	/*---modifiche agli angoli--- */
	if(Keypressed(VK_LEFT) || Keypressed("a")) {
		r = -angleStep;
	} else if(Keypressed(VK_RIGHT) || Keypressed("d")) {
		r = angleStep;
	}
	if(Keypressed(VK_UP) || Keypressed("w")) {
		p = angleStep;
	} else if(Keypressed(VK_DOWN) || Keypressed("s")) {
		p = -angleStep;
	}
	if(Keypressed(VK_RSHIFT) || Keypressed("q")) {
		y = angleStep;
	} else if(Keypressed(VK_END) || Keypressed("e")) {
		y = -angleStep;
	}
	/*if(dx>0){
		y -= ((ALPHA*dx+(1-ALPHA)*lastDX)-DELTA_X_MAX/2)*MOUSE_STEP;
	}
	if(dy>0){
		p += ((ALPHA*dy+(1-ALPHA)*lastDY)-DELTA_Y_MAX/2)*MOUSE_STEP;
	}
	lastDX = dx;
	lastDY = dy;*/
	/*if(Mouse.X > 770){
		y += angleStep;
	} else if(Mouse.X < 766){
		y -= angleStep;
	}
	if (Mouse.Y > 412){
		p += angleStep;
	} else if( Mouse.Y<408){
		p -= angleStep;
	}*/
	
	y -= ((ALPHA*mx+(1-ALPHA)*lastDX)-X_MAX/2)*MOUSE_STEP;
	p += ((ALPHA*my+(1-ALPHA)*lastDY)-Y_MAX/2)*MOUSE_STEP;
	lastDX = mx;
	lastDY = my;
	/*---Shoot---*/
	if(lButton && (fastShoot > SHOOT_RATE)) {
		fastShoot = 0;
		fighter.fireBeam();
		//fireBeamAntiBounce = true;
	} else if (!lButton) {
		fastShoot = 0;
	}
	/* else if(fireBeamAntiBounce){
		fighter.fireBeam();  
		fireBeamAntiBounce = false;
	}*/
	/*---Modify camera mode---*/
	if(Keypressed("c")) {
		cameraModeAntiBounce = true;
	} else if (cameraModeAntiBounce == true) {
		fighter.changeCameraMode();
		cameraModeAntiBounce = false;
	}

	/*---rotazione oggetto---*/
	fighter.setRelativeAngle(r, p, y);
	time = GetTime();
}

function UserInput::userControlGameMenu()
{
	/* TODO: usare una funzione per i comandi del menu di selezione */
	static var leftPressed = false;
	static var rightPressed = false;
	static var enterPressed = false;
	if(Keypressed(VK_LEFT)) {
		leftPressed = true;
	} else if (leftPressed == true) {
		leftPressed = false;
		return 1;
	}
	if(Keypressed(VK_RIGHT)) {
		rightPressed = true;
	} else if (rightPressed == true) {
		rightPressed = false;
		return 2;
	}
	if(Keypressed(VK_SPACE)) {
		enterPressed = true;
	} else if (enterPressed == true) {
		enterPressed = false;
		return 3;
	}
	
	return 0;
}
