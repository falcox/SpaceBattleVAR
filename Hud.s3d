#define ROWSPAN 			0.03
#define MSG_LIFETIME 		5000
#define SCREENMSG_LIFETIME 	3000
#define MSG_QUEUE_LEN		20
#define AIM_SIZE			0.25
#define HEALTHBAR_W			4.0
#define HEALTHBAR_H			(HEALTHBAR_W / 8)
#define BATTERYBAR_W		3.0
#define BATTERYBAR_H		(BATTERYBAR_W / 8)
#define TURBOBAR_W			2.0

class Message {
	var msg;
	var lifetime;
	var fixed;
};

class Hud {
	var deathNumber;
	var killNumber;
	var msgPool;
	var screenMsg;
	var time;
	var tick;
	var aimTexture;
	var lifeContainerTexture;
//	var battContainerTexture;
	var lifeHpTexture;
	var batteryTexture;
	var turboTexture;
	var aimColor;
	
	Hud(fighter);
	increaseDeathCounter(playerId);
	increaseKillCounter(playerId);
	appendMessage(string, fixed);
	setScreenMessage(string, fixed);
	setHudByFighter(fighter);
	draw(myFighter);
	resetHud();
};

function Hud::Hud()
{
	deathNumber = 0;
	killNumber = 0;
	msgPool = Array(0);
	screenMsg = void;
	time = GetTime();
	tick = 0;
	
	aimTexture = CVmTexture("aim3.png");
	lifeHpTexture = CVmTexture("lifebar-hp3.png");
	lifeContainerTexture = CVmTexture("grey-lifebar-container.png");
//	battContainerTexture = CVmTexture("grey-lifebar-container2.png");
	batteryTexture = CVmTexture("lifebar-battery2.png");
	turboTexture = CVmTexture("lifebar-turbo.png");
	aimColor = [1,0,0];
}

function Hud::draw(myFighter)
{
//	static var time = GetTime();
//	static var tick = 0;
	var rowy = 0.07;
	tick = GetTime() - time;
	glEnable(GL_BLEND);
	ConsoleColor(0.1, 1, 0.1, 0.3);
	ConsoleFilledRect(0.1, 0.1, 0.7, 0.1 );
	var queueLen = len(msgPool);
	var deletedIndexArray = Array(0);
	for (var i = 0; i < queueLen; i++) {
		consoleFont("Star Jedi", 16);
		ConsoleColor(1, 1, 1, 1);
		ConsoleText (0.11, rowy, msgPool[i].msg);
		rowy -= ROWSPAN;
		if (msgPool[i].fixed == false) {
			msgPool[i].lifetime -= tick;
		}
		if (msgPool[i].lifetime <= 0) {
			/* Add index to remember which message delete */
			aadd(deletedIndexArray, i);
		}
	}
	glDisable(GL_BLEND);
	
	if (screenMsg != void) {
		consoleFont("Star Jedi", 48);
		consoleColor(1.0,1.0,0.0);
		consoleText(0.35,0.6, screenMsg.msg);
		if (screenMsg.fixed == false) {
			screenMsg.lifetime -= tick;
		}
		if (screenMsg.lifetime <= 0) {
			screenMsg = void;
		}
	}

	consoleFont("Star Jedi", 16);
	ConsoleColor(1, 1, 0, 1);
	ConsoleText (0.075, 0.75, sprintf("kills: %d\ndeaths: %d", killNumber, deathNumber));
	
	var lifeStat = myFighter.getCurrentLife() / 100.0;
	var battStat = myFighter.getCurrentBattery() / 100.0;
	var turboStat = myFighter.getCurrentTurbo() / 100.0;
	
	glMatrixMode(GL_PROJECTION);
	glPushMatrix();
	glLoadIdentity();
	glOrtho(0.0, RATIO_W, 0.0, RATIO_H, -1.0, 1.0);		/*TODO: MUST BE RESIZED EVERY TIME THE WINDOW CHANGES! */
	
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	
	glDisable(GL_LIGHTING); 
	glDisable(GL_DEPTH_TEST);
	glEnable(GL_BLEND);
	
	glTranslate(RATIO_W/2, RATIO_H/2 - 0.15);
	SetActiveTexture(aimTexture);
	glBegin(GL_QUADS);
		//glNormal(0, 0, 1);
		glColor(aimColor.x, aimColor.y, aimColor.z, 0.5);
		glTexCoord(0, 1); glVertex(-AIM_SIZE, -AIM_SIZE, 1);
		glTexCoord(1, 1); glVertex(AIM_SIZE, -AIM_SIZE, 1);
		glTexCoord(1, 0); glVertex(AIM_SIZE, AIM_SIZE, 1);
		glTexCoord(0, 0); glVertex(-AIM_SIZE, AIM_SIZE, 1);
	glEnd();
	
	glLoadIdentity();
	glTranslate(RATIO_W/16, RATIO_H*14/16);
	SetActiveTexture(lifeHpTexture);
	glBegin(GL_QUADS);
		glColor(1,1,1,1);
		glTexCoord(0, 1); glVertex(0, 0);
		glTexCoord(lifeStat, 1); glVertex(HEALTHBAR_W*lifeStat, 0);
		glTexCoord(lifeStat, 0); glVertex(HEALTHBAR_W*lifeStat, HEALTHBAR_W/8);
		glTexCoord(0, 0); glVertex(0, HEALTHBAR_W/8);
	glEnd();
	
//	glEnable(GL_BLEND);
//	glLoadIdentity();
//	glTranslate(RATIO_W/16, RATIO_H*14/16-BATTERYBAR_H);
	SetActiveTexture(batteryTexture);
	glBegin(GL_QUADS);
//		glColor(1,1,1,1);
		glTexCoord(0, 1); glVertex(0, -BATTERYBAR_H);
		glTexCoord(battStat, 1); glVertex(BATTERYBAR_W*battStat, -BATTERYBAR_H);
		glTexCoord(battStat, 0); glVertex(BATTERYBAR_W*battStat, 0);
		glTexCoord(0, 0); glVertex(0, 0);
	glEnd();
	
	SetActiveTexture(turboTexture);
	glBegin(GL_QUADS);
		glColor(1,1,1,1);
		glTexCoord(0, 1); glVertex(0, -2*BATTERYBAR_H);
		glTexCoord(turboStat, 1); glVertex(TURBOBAR_W*turboStat, -2*BATTERYBAR_H);
		glTexCoord(turboStat, 0); glVertex(TURBOBAR_W*turboStat, -BATTERYBAR_H);
		glTexCoord(0, 0); glVertex(0, -BATTERYBAR_H);
	glEnd();

	SetActiveTexture(lifeContainerTexture);
	glBegin(GL_QUADS);
		glColor(1,1,1,0.8);
		glTexCoord(0, 1); glVertex(0, 0);
		glTexCoord(1, 1); glVertex(HEALTHBAR_W, 0);
		glTexCoord(1, 0); glVertex(HEALTHBAR_W, HEALTHBAR_H);
		glTexCoord(0, 0); glVertex(0, HEALTHBAR_H);
//	glEnd();
//	SetActiveTexture(battContainerTexture);
//	glBegin(GL_QUADS);
//		glNormal(0, 0, 1);
		glColor(1,1,1,0.8);
		glTexCoord(0, 1); glVertex(0, -BATTERYBAR_H);
		glTexCoord(1, 1); glVertex(BATTERYBAR_W, -BATTERYBAR_H);
		glTexCoord(1, 0); glVertex(BATTERYBAR_W, 0);
		glTexCoord(0, 0); glVertex(0, 0);
		
		glColor(1,1,1,0.8);
		glTexCoord(0, 1); glVertex(0, -2*BATTERYBAR_H);
		glTexCoord(1, 1); glVertex(TURBOBAR_W, -2*BATTERYBAR_H);
		glTexCoord(1, 0); glVertex(TURBOBAR_W, -BATTERYBAR_H);
		glTexCoord(0, 0); glVertex(0, -BATTERYBAR_H);
	glEnd();
	
	
	glDisable(GL_BLEND);
	glEnable(GL_LIGHTING);
	glEnable(GL_DEPTH_TEST);
	glPopMatrix();
	
	glMatrixMode(GL_PROJECTION);
	glPopMatrix();
	
	glMatrixMode(GL_MODELVIEW);
	
	
	/* delete messages */
	queueLen = len(deletedIndexArray);
	for (var i = 0; i < queueLen; i++) {
		adel(msgPool, deletedIndexArray[i]);
	}
	
	time = GetTime();
}

function Hud::resetHud()
{
	time = GetTime();
	deathNumber = 0;
	killNumber = 0;
	msgPool = Array(0);
	screenMsg = void;
}

function Hud::appendMessage(string, fixed)
{
	var msg = Message();
	msg.msg = string;
	msg.lifetime = MSG_LIFETIME;
	msg.fixed = fixed;
	aadd(msgPool, msg);
}

function Hud::increaseDeathCounter(playerId)
{
	deathNumber++;
	var msg = sprintf("Player %d has killed you!", playerId);
	appendMessage(msg, false);
}

function Hud::increaseKillCounter(playerId)
{
	killNumber++;
	var msg = sprintf("Killed player %d!", playerId);
	appendMessage(msg, false);
}

function Hud::setHudByFighter(fighter) {
	if(fighter.fighterType == 4 || fighter.fighterType == 1) {
		aimColor = [0,1,0];	
	} else {
		aimColor = [1,0,0];
	}
}

function Hud::setScreenMessage(string, fixed)
{
	screenMsg = Message();
	screenMsg.msg = string;
	screenMsg.lifetime = SCREENMSG_LIFETIME;
	screenMsg.fixed = fixed;
}
	
	