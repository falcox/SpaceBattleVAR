#include <AckMsgWindow.s3d>

//#define BROADCAST_ADDRESS "10.0.0.255"
//#define BROADCAST_ADDRESS "10.1.197.255"
//#define BROADCAST_ADDRESS "10.30.3.255"
#define BROADCAST_ADDRESS "192.168.225.255"
//#define BROADCAST_ADDRESS "192.168.100.255"

#define SERVER_ADV_PDU			1
#define REQ_ID_PDU				2
#define ACK_ID_PDU				3
#define KEEPALIVE_PDU			4
#define FIGHTER_PDU				5
#define AMBIENT_PDU				6
#define AMBIENT_PDU_ACK			7
#define AMBIENT_DESTROYED		8
#define AMBIENT_DESTROYED_ACK	9
#define LASERBEAM_PDU			10
#define LASERBEAM_PDU_ACK		11
/* to be implemented */
#define FIGHTER_DESTROYED		12
#define FIGHTER_DESTROYED_ACK	13


#define ENEMIES_FIGHTER_NUM	10

#define LOST_SERVER_MSEC_THRESHOLD 	10000
#define SEND_ADV_MSEC_THRESHOLD 	2000
#define ACK_ID_ERROR				-1
#define KEEPALIVE_MSEC				10000
#define KEEPALIVE_SEND_MSEC			3500
#define RESEND_WAIT_MSEC			3500
/* DATA_SEND_THRESHOLD threshold to decide to whom a pdu will be sended, 
 * based on last player position sended and actual position on PDU */
#define DATA_SEND_THRESHOLD			1000
/* DISTANCE_BETWEEN_PDU: threshold to decide when a PDU can be sended, 
 * based on last player position sended and actual position on PDU */
#define DISTANCE_BETWEEN_PDU		10


/*
 * Packets: 	SERVER_ADV_PDU: 		{1, server_playerId, next_playerId, max_playerId}
 * 				REQ_ID_PDU:				{2, msgId, playerId_requested}
 * 				ACK_ID_PDU:				{3, msgId, playerId_assigned}
 * 				KEEPALIVE_PDU:			{4, playerId}
 * 				
 * 				FIGHTER_PDU:			{5, playerId, fighterType, posx, posy, posz, roll, pitch, yaw, velocity, framenumber, currentLife}
 * 				AMBIENT_PDU:			{6, msgId, ambientId, ambientType, centerx, centery, centerz, radius, orbitPeriod, serverTime}
 * 				AMBIENT_PDU_ACK:		{7, msgId, playerId}
 * 				AMBIENT_DESTROYED		{8, msgId, ambientId}
 * 				AMBIENT_DESTROYED_ACK	{9, msgId, playerId}
 * 				LASERBEAM_PDU			{10, msgId, playerId, origin_playerId, iposx, iposy, iposz, eposx, eposy, eposz, originTime, damage}
 * 				LASERBEAM_PDU_ACK		{11, msgId, playerId}
 * 				FIGHTER_DESTROYED		{12, msgId, sender_playerId, dead_playerId, killer_playerId} 
 * 				FIGHTER_DESTROYED_ACK	{13, msgId, playerId}
 */

class player {
	var playerIpAddress;
	var keepaliveTime;
	var posx;
	var posy;
	var posz;
};

class Networker {
	
	var playerId;
	var advServerChannel;
	var server;
	var serverIp;
	var serverId;
	var player_list;
	var player_number;
	var lastPlayerDataSended;
	
	var resendWindow;
	var keepaliveTimeElapsed;
	
	/* Events */
	var idEvent;
	var enemyDataEvent;
	var enemyExitEvent;
	var ambientDataEvent;
	var ambientDestroyEvent;
	var laserBeamEvent;
	var fighterDestroyedEvent;
	
	Networker();
	getId();
	poll();
	isServer();
	isIdEvent();
	isEnemyDataEvent();
	isEnemyExitEvent();
	isAmbientDataEvent();
	isAmbientDestroyEvent();
	isLaserBeamEvent();
	isFighterDestroyedEvent();
	sendFighterData(fighterData);
	sendAmbientData(ambientId, ambientData);
	sendAmbientDestroyData(ambientId, idExcluded);
	sendAmbientDestroyAck(destination, ackIdMsg);
	sendLaserBeamData(laserData, idExcluded);
	sendLaserBeamAck(destination, ackIdMsg);
	sendFighterDestroyedData(dead_player, killer_player);
	sendFighterDestroyedAck(destination, ackIdMsg);
	
	/*private*/
	playerLost(id);
	sendBroadcastAdv();
	sendReqId(req_id);
	sendAckId(destination, ackIdMsg, ack_id);
	sendAmbientDataAck(ackIdMsg);
	sendKeepalive();
	relayPlayerData(PDU);
};

function euclideanDistance(position1, position2)
{
	var difference = position2 - position1;
	var sum = 0;
	for(var i = 0; i < len(difference); i++) {
		sum += (difference[i] ^ 2);
	}
	return sqrt(sum);
}

function floatEqual(number1, number2, error)
{
	if ( abs(number1 - number2) < error ) {
        return true;
    }
    return false;
}

function Networker::isIdEvent()
{
	return idEvent; 
}

function Networker::isEnemyDataEvent()
{
	return enemyDataEvent;
}

function Networker::isEnemyExitEvent()
{
	return enemyExitEvent;
}

function Networker::isAmbientDataEvent()
{
	return ambientDataEvent;
}

function Networker::isAmbientDestroyEvent()
{
	return ambientDestroyEvent;
}

function Networker::isLaserBeamEvent()
{
	return laserBeamEvent;
}

function Networker::isFighterDestroyedEvent()
{
	return fighterDestroyedEvent;
}

function Networker::Networker()
{
	playerId = -1;
	serverId = -1;
	server = false;
	advServerChannel = NetCreateChannel(50023,"0.0.0.0",VR_NO_BLOCKING);
	player_list = Array(ENEMIES_FIGHTER_NUM);
	for (var i = 0; i < ENEMIES_FIGHTER_NUM; i++) {
		player_list[i] = void;
	}
	player_number = 0;
	keepaliveTimeElapsed = 0;
	lastPlayerDataSended = vector(10);
	resendWindow = AckMsgWindow(ENEMIES_FIGHTER_NUM, RESEND_WAIT_MSEC);
	idEvent = Event();
	enemyDataEvent = Event();
	enemyExitEvent = Event();
	ambientDataEvent = Event();
	ambientDestroyEvent = Event();
	laserBeamEvent = Event();
	fighterDestroyedEvent = Event();
}

function Networker::getId()
{
	return playerId;
}

function Networker::isServer()
{
	return server;
}

function Networker::sendBroadcastAdv()
{
	//SERVER_ADV_PDU: {1, server_playerId, next_playerId, max_playerId}
	var next_playerId = ENEMIES_FIGHTER_NUM + 1;
	for (var i = 0; i < ENEMIES_FIGHTER_NUM; i++) {
		if (i != playerId && player_list[i] == void) {
			next_playerId = i;
			break;
		}
	}
	var PDU = vector(4);
	PDU[0] = SERVER_ADV_PDU;
	PDU[1] = playerId;
	PDU[2] = next_playerId;
	PDU[3] = ENEMIES_FIGHTER_NUM;
	NetVarSendTo(BROADCAST_ADDRESS, 50023, PDU);
}

function Networker::sendReqId(req_id)
{
	//REQ_ID_PDU:		{2, msgId, playerId_requested}
	var PDU = vector(3);
	PDU[0] = REQ_ID_PDU;
	PDU[1] = 0;
	PDU[2] = req_id;
	resendWindow.add(serverId, serverIp, PDU);
}

function Networker::sendAckId(destination, ackIdMsg, ack_id)
{
	//ACK_ID_PDU:		{3, msgId, playerId_assigned}
	var PDU = vector(3);
	PDU[0] = ACK_ID_PDU;
	PDU[1] = ackIdMsg;
	PDU[2] = ack_id;
	NetVarSendTo(destination, 50023, PDU);
}

function Networker::sendKeepalive()
{
	//KEEPALIVE_PDU:		{4, playerId}
	var PDU = vector(2);
	PDU[0] = KEEPALIVE_PDU;
	PDU[1] = playerId;
	NetVarSendTo(serverIp, 50023, PDU);
}

function Networker::relayPlayerData(PDU)
{
	/* Here we relay the data to all player only if the sender of this 
	 * PDU has distance lesser than a threshold
	 */
	if (server == false) {
		return;
	}
	var pdupos = [PDU[3], PDU[4], PDU[5]];
	for (var i = 0; i < ENEMIES_FIGHTER_NUM; i++) {
		/* Check if there is an entry, then if it is not me and if it is not the player that sent the PDU */
		if (player_list[i] != void && i != playerId && i != PDU[1]) {
			var playerpos = [player_list[i].posx, player_list[i].posy, player_list[i].posz];
			if (euclideanDistance(playerpos, pdupos) < DATA_SEND_THRESHOLD) {
				NetVarSendTo(player_list[i].playerIpAddress, 50023, PDU);
			}
		}
	}
}

function Networker::sendFighterData(fighterData)
{
	if (playerId == -1) {
		return;
	}
	//FIGHTER_PDU:	{5, playerId, fighterType, posx, posy, posz, roll, pitch, yaw, velocity, framenumber, currentLife}
	var PDU = vector(12);
	PDU[0] = FIGHTER_PDU;
	PDU[1] = playerId;
	PDU[2] = fighterData[0];
	PDU[3] = fighterData[1];
	PDU[4] = fighterData[2];
	PDU[5] = fighterData[3];
	PDU[6] = fighterData[4];
	PDU[7] = fighterData[5];
	PDU[8] = fighterData[6];
	PDU[9] = fighterData[7];
	PDU[10] = fighterData[8];
	PDU[11] = fighterData[9];
	
	var changed = false;
	var lastPos = [lastPlayerDataSended[3], lastPlayerDataSended[4], lastPlayerDataSended[5]];
	var pduPos = [PDU[3], PDU[4], PDU[5]];
	for(var i = 6; i < 12; i++) {
		if (!floatEqual(PDU[i], lastPlayerDataSended[i], 0.05)) {
			changed = true;
			//Outputln(Sprintf("PDU: %f != last: %f", PDU[i], lastPlayerDataSended[i]));
		}
	}
	if (euclideanDistance(lastPos, pduPos) > DISTANCE_BETWEEN_PDU) {
		changed = true;
	}
	if (changed == true) {
		if (server == true) {
			relayPlayerData(PDU);
		} else {
			NetVarSendTo(serverIp, 50023, PDU);
		}
		lastPlayerDataSended = PDU;
		keepaliveTimeElapsed = 0;
	}
}

function Networker::sendAmbientData(ambientId, ambientData)
{
	if (server == false) {
		return;
	}
	//AMBIENT_PDU:		{6, msgId, ambientId, ambientType, centerx, centery, centerz, radius, orbitPeriod, serverTime}
	var PDU = vector(10);
	PDU[0] = AMBIENT_PDU;
	PDU[1] = 0;
	PDU[2] = ambientId;
	PDU[3] = ambientData[0];
	PDU[4] = ambientData[1];
	PDU[5] = ambientData[2];
	PDU[6] = ambientData[3];
	PDU[7] = ambientData[4];
	PDU[8] = ambientData[5];
	PDU[9] = ambientData[6];
	
	for (var i = 0; i < ENEMIES_FIGHTER_NUM; i++) {
		/* Check if there is an entry, then if it is not me then send the PDU */
		if (player_list[i] != void && i != playerId) {
			resendWindow.add(i, player_list[i].playerIpAddress, PDU);
		}
	}
}

function Networker::sendAmbientDataAck(ackIdMsg)
{
	//AMBIENT_PDU_ACK:	{7, msgId, playerId}
	var PDU = vector(3);
	PDU[0] = AMBIENT_PDU_ACK;
	PDU[1] = ackIdMsg;
	PDU[2] = playerId;
	NetVarSendTo(serverIp, 50023, PDU);
}

function Networker::sendAmbientDestroyData(ambientId, idExcluded)
{
	//AMBIENT_DESTROYED		{8, msgId, ambientId, playerId}
	var PDU = vector(4);
	PDU[0] = AMBIENT_DESTROYED;
	PDU[1] = 0;
	PDU[2] = ambientId;
	PDU[3] = playerId;
	/* If i am the server share information with clients, else send the information to the server */
	if (server == true) {
		for (var i = 0; i < ENEMIES_FIGHTER_NUM; i++) {
			/* Check if there is an entry, then if it is not me then send the PDU */
			if (player_list[i] != void && i != playerId && i != idExcluded) {
				resendWindow.add(i, player_list[i].playerIpAddress, PDU);
			}
		}
	} else {
		resendWindow.add(serverId, serverIp, PDU);
	}
}

function Networker::sendAmbientDestroyAck(destination, ackIdMsg)
{
	//AMBIENT_DESTROYED_ACK	{8, msgId, playerId}
	var PDU = vector(3);
	PDU[0] = AMBIENT_DESTROYED_ACK;
	PDU[1] = ackIdMsg;
	PDU[2] = playerId;
	NetVarSendTo(destination, 50023, PDU);
}

function Networker::sendLaserBeamData(laserData, idExcluded)
{
	// LASERBEAM_PDU {10, msgId, playerId, origin_playerId, iposx, iposy, iposz, eposx, eposy, eposz, originTime, damage}
	var PDU = vector(12);
	PDU[0] = LASERBEAM_PDU;
	PDU[1] = 0;
	PDU[2] = playerId;
	PDU[3] = 0; // fill later
	PDU[4] = laserData[0];
	PDU[5] = laserData[1];
	PDU[6] = laserData[2];
	PDU[7] = laserData[3];
	PDU[8] = laserData[4];
	PDU[9] = laserData[5];
	PDU[10] = laserData[6];
	PDU[11] = laserData[7];
	/* If i am the server share information with clients, else send the information to the server */
	if (server == true) {
		if (idExcluded != -1) {
			PDU[3] = idExcluded;
		} else {
			PDU[3] = playerId;
		}
		for (var i = 0; i < ENEMIES_FIGHTER_NUM; i++) {
			/* Check if there is an entry, then if it is not me then send the PDU */
			if (player_list[i] != void && i != playerId && i != idExcluded) {
				resendWindow.add(i, player_list[i].playerIpAddress, PDU);
			}
		}
	} else {
		PDU[3] = playerId;
		resendWindow.add(serverId, serverIp, PDU);
	}
}

function Networker::sendLaserBeamAck(destination, ackIdMsg)
{
	// LASERBEAM_PDU_ACK		{11, msgId, playerId}
	var PDU = vector(3);
	PDU[0] = LASERBEAM_PDU_ACK;
	PDU[1] = ackIdMsg;
	PDU[2] = playerId;
	NetVarSendTo(destination, 50023, PDU);
}

function Networker::sendFighterDestroyedData(dead_player, killer_player)
{
	//FIGHTER_DESTROYED		{12, msgId, sender_playerId, dead_playerId, killer_playerId} 
	var PDU = vector(5);
	PDU[0] = FIGHTER_DESTROYED;
	PDU[1] = 0;
	PDU[2] = playerId;
	PDU[3] = dead_player;
	PDU[4] = killer_player;
	/* If i am the server share information with clients, else send the information to the server */
	if (server == true) {
		if (dead_player == -1) {
			PDU[3] = playerId;
		}
		for (var i = 0; i < ENEMIES_FIGHTER_NUM; i++) {
			/* Check if there is an entry, then if it is not me then send the PDU */
			/* Because we receive the packet from the destroyed player, we will not resend this packet to him */
			if (player_list[i] != void && i != playerId && i != dead_player) {
				resendWindow.add(i, player_list[i].playerIpAddress, PDU);
			}
		}
	} else {
		/* if I am not server, we are sending this packet so I am the one destroyed */
		PDU[3] = playerId;
		/* We are not a server so send this packet to the server */
		resendWindow.add(serverId, serverIp, PDU);
	}
}

function Networker::sendFighterDestroyedAck(destination, ackIdMsg)
{
	//FIGHTER_DESTROYED_ACK	{13, msgId, playerId}
	var PDU = vector(3);
	PDU[0] = FIGHTER_DESTROYED_ACK;
	PDU[1] = ackIdMsg;
	PDU[2] = playerId;
	NetVarSendTo(destination, 50023, PDU);
}

function Networker::playerLost(id)
{
	player_list[id] = void;
	player_number--;
	resendWindow.emptyQueue(id);
	EventPost(enemyExitEvent, id, 1);
}

function Networker::poll()
{
	static var time = GetTime();
	static var advTimeElapsed = 0;
	var data_ready = true;
	var tickMsec = GetTime() - time;

	keepaliveTimeElapsed += tickMsec;
	advTimeElapsed += tickMsec;
	
	while(data_ready) {
		var sender = "................";
		var received_data = NetVarReceiveFrom(advServerChannel,&sender);
		var debug_pkt_loss = Rand(100); // TODO: pkt loss debug
		if(received_data != void) {
			if(received_data[1] != playerId) {
				//trace(received_data);
				/* SERVER_ADV_PDU handling code */
				if(received_data[0] == SERVER_ADV_PDU) {
					serverId = received_data[1];
					if (playerId == -1 && resendWindow.queueSize( serverId ) == 0) {
						/* we have no Id so request one from server */
						serverIp = sender;
						if (received_data[2] <= received_data[3]) {
							sendReqId(received_data[2]);
						} else {
							//TODO ERRORE! troppi giocatori
							Outputln("MAX PLAYER NUMBER REACHED!");
							EventPost(idEvent,-2,1);
						}
					}
					if (server == true) {
						/* we receive an advertisement from another server so decide who will do the server */
						if (received_data[1] < playerId) {
							server = false;
						}
					}
					if (serverIp != sender && playerId != -1) {
						/* maybe the server is changed, so update server address and renew Id */
						serverIp = sender;
						sendReqId(playerId);
					}
					advTimeElapsed = 0;
				} else 
				/* ACK_ID_PDU handling code */
				if (received_data[0] == ACK_ID_PDU) {
					/* we have received an id from server */
					if (received_data[2] < 0) {
						/* Error */
						Outputln("ERROR ACK ID FROM SERVER!");
						playerId = -1;
					} else {
						playerId = received_data[2];
						resendWindow.ackReceived(serverId, received_data[1]);
						EventPost(idEvent,playerId,1);
						/* TODO generate an event  */
					}
				} else 
				/* REQ_ID_PDU handling code */
				if (received_data[0] == REQ_ID_PDU && server == true) {
					/* We are the server  */
					var id = received_data[2];
					/* Renew the id */
					if (player_list[id] != void && player_list[id].playerIpAddress == sender) {
						player_list[id].keepaliveTime = KEEPALIVE_MSEC;
					} else {
						var i = 0;
						for (i = 0; i < ENEMIES_FIGHTER_NUM; i++) {
							if (player_list[i] == void) {
								player_list[i] = player();
								player_list[i].playerIpAddress = sender;
								player_list[i].keepaliveTime = KEEPALIVE_MSEC;
								player_list[i].posx = 0;
								player_list[i].posy = 0;
								player_list[i].posz = 0;
								player_number++;
								/* send ACK */
								sendAckId(sender, received_data[1], id);
								break;
							}
						}
						/* If there is no more space for players send error */
						if (i >= ENEMIES_FIGHTER_NUM) {
							sendAckId(sender, received_data[1], ACK_ID_ERROR);
						}
					}
				} else 
				/* KEEPALIVE_PDU handling code */
				if (received_data[0] == KEEPALIVE_PDU && server == true) {
					var id = received_data[1];
					if (player_list[id] != void && player_list[id].playerIpAddress == sender) {
						player_list[id].keepaliveTime = KEEPALIVE_MSEC;
					}
				} else 
				/* Data player packets handling code */
				if (received_data[0] == FIGHTER_PDU) {
					var id = received_data[1];
					//FIGHTER_PDU:	{5, playerId, fighterType, posx, posy, posz, roll, pitch, yaw, velocity, framenumber, currentLife}
					var data = {id, received_data[2], received_data[3], received_data[4], received_data[5],
						received_data[6], received_data[7], received_data[8], received_data[9], received_data[10],
						received_data[11]
					};
					if (server == true) {
						/* I'm the server so I know who are players, if it is not in the list don't relay */
						if (player_list[id] != void && player_list[id].playerIpAddress == sender) {
							player_list[id].keepaliveTime = KEEPALIVE_MSEC;
							player_list[id].posx = received_data[3];
							player_list[id].posy = received_data[4];
							player_list[id].posz = received_data[5];
							relayPlayerData(received_data);
						} else {
							sendAckId(sender, 0, ACK_ID_ERROR);
						}
					} else {
						/* I'm a client, if I don't know this identificator I create a new record */
						if (player_list[id] == void) {
							player_list[id] = Player();
						}
						player_list[id].keepaliveTime = KEEPALIVE_MSEC;
					}
					EventPost(enemyDataEvent, data, 1);
				} else
				if (received_data[0] == AMBIENT_PDU) {
					if (sender == serverIp) {
						//AMBIENT_PDU:		{6, msgId, ambientId, ambientType, centerx, centery, centerz, radius, orbitPeriod, serverTime}
						var data = {received_data[2], received_data[3], received_data[4], received_data[5],
							received_data[6], received_data[7], received_data[8], received_data[9]
						};
						sendAmbientDataAck(received_data[1]);
						EventPost(ambientDataEvent, data, 1);
					}
				} else
				if (received_data[0] == AMBIENT_PDU_ACK) {
					//AMBIENT_PDU_ACK:	{7, msgId, playerId}
					if (server == true) {
						resendWindow.ackReceived(received_data[2], received_data[1]);
					}
				} else
				if (received_data[0] == AMBIENT_DESTROYED) {
					/* If i am the server relay information to all client except the sender */
					if (server == true) {
						sendAmbientDestroyData(received_data[2], received_data[3]);
					}
					sendAmbientDestroyAck(sender, received_data[1]);
					EventPost(ambientDestroyEvent, received_data[2], 1);
				} else
				if (received_data[0] == AMBIENT_DESTROYED_ACK) {
					resendWindow.ackReceived(received_data[2], received_data[1]);
				} else
				if (received_data[0] == LASERBEAM_PDU) {
					/* If i am the server relay information to all client except the sender */
					var data = {received_data[3], received_data[4], received_data[5], received_data[6], received_data[7],
						 received_data[8], received_data[9], received_data[10], received_data[11]
					};
					if (server == true) {
						sendLaserBeamData(data, received_data[3]);
					}
					sendLaserBeamAck(sender, received_data[1]);
					EventPost(laserBeamEvent, data, 1);
				} else
				if (received_data[0] == LASERBEAM_PDU_ACK) {
					resendWindow.ackReceived(received_data[2], received_data[1]);
				} else
				if (received_data[0] == FIGHTER_DESTROYED) {
					//FIGHTER_DESTROYED		{12, msgId, sender_playerId, dead_playerId, killer_playerId}
					if (server == true) {
						sendFighterDestroyedData(received_data[3], received_data[4]);
					}
					sendFighterDestroyedAck(sender, received_data[1]);
					var data = {received_data[3], received_data[4]};
					EventPost(fighterDestroyedEvent, data, 1);
				} else
				if (received_data[0] == FIGHTER_DESTROYED_ACK) {
					//FIGHTER_DESTROYED_ACK	{13, msgId, playerId}
					resendWindow.ackReceived(received_data[2], received_data[1]);
				}
			}
		} else {
			data_ready = false;
		}
	}
	
	/* if this condition holds we have not received any advertisement until the temporal threshold,
	 * so we can infer that the server is lost. We are the server now.
	 */
	if (advTimeElapsed > LOST_SERVER_MSEC_THRESHOLD) {
		advTimeElapsed = 0;
		server = true;
		if (playerId == -1) {
			playerId = 0;
		}
		if (serverId != -1) {
			playerLost(serverId);
		}
		serverId = playerId;
		player_list[playerId] = player();
		player_list[playerId].keepaliveTime = KEEPALIVE_MSEC;
		sendBroadcastAdv();
		EventPost(idEvent, playerId, 1);
		Outputln("I'M THE SERVER!");
	}
	
	/* if this condition holds we are the server and we periodically send advertisement */
	if (advTimeElapsed > SEND_ADV_MSEC_THRESHOLD && server == true) {
		advTimeElapsed = 0;
		sendBroadcastAdv();
		//Outputln("SEND ADV!");
	}
	
	/* send keepalive */
	if (keepaliveTimeElapsed > KEEPALIVE_SEND_MSEC && playerId != -1 && server == false) {
		sendKeepalive();
		keepaliveTimeElapsed = 0;
	}
	
	/* Resend window, a queue to store non-acked message */
	resendWindow.send();
	
	/* decrease keepalive time of each player */
	if (playerId != -1) {
		for (var i = 0; i < ENEMIES_FIGHTER_NUM; i++) {
			if (player_list[i] != void && i != playerId && i != serverId) {
				player_list[i].keepaliveTime -= tickMsec;
				if (player_list[i].keepaliveTime <= 0) {
					playerLost(i);
				}
			}
		}
	}
	time = GetTime();
}



