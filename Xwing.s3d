#define FRAME_STEP 0.5
#define ANGLE_STEP 	0.5
//#define MIN_SPEED	0.1
#define MIN_SPEED	0
//#define MAX_SPEED	0.4
#define MAX_SPEED	300
//#define SPEED_STEP	0.0025
#define SPEED_STEP	5

class Xwing {
	var FighterObj;	
	var FighterPos;
	var FighterType;
	var withCamera;
	var camera;
	var light;
	var cameraMode;			/* 0->behind / 1->inside */
	
	var yaw;				/* Angle on Y axis */
	var pitch;				/* Angle on X axis */
	var roll;				/* Angle on Z axis */
	var rollDelta, pitchDelta, yawDelta;		
	var currentLife;		/* Life variable from 0 to 100 */
	var velocity;
	var currentFrame;
	
	init(mesh, type);
	draw();
	setPosition(position);
	setSpeed(speed);
	setAngle(r, p, y);
	setRelativeAngle(r, p, y);
	setAnimationFrame(frame_number);
	getAngleStep();
	increaseSpeed();
	decreaseSpeed();
	useCamera(cam);			/*--- cam true if this obj uses camera, otherwise false ---*/
	changeCameraMode();
	update();
	getFighterData();
};

function Xwing::init(mesh, type){
	yaw = 0;
	roll = 0;
	pitch = 0;
	FighterType = type;
	FighterPos = [0,0,0];
	velocity = MIN_SPEED;
	currentFrame = 0;
	currentLife = 100;
	cameraMode = 0;
	withCamera = false;
	
	FighterObj = CVmObj(mesh);
}

function Xwing::useCamera(cam)
{
	withCamera = cam;
	if (cam == true) {
		camera = CameraGetCurrent();
		light = CVmLight();
		light.SetDiffuse(1, 1, 1);
		light.Enable();
	} else {
		camera = void;
		light.Disable();
		light = void;
	}
}

function Xwing::changeCameraMode()
{
	cameraMode = 1 - cameraMode;
}

function Xwing::getAngleStep()
{
	return ANGLE_STEP;
}

function Xwing::getFighterData()
{
	var data = vector(9);
	data[0] = fighterType;
	data[1] = FighterPos.x;
	data[2] = FighterPos.y;
	data[3] = FighterPos.z;
	data[4] = roll;
	data[5] = pitch;
	data[6] = yaw;
	data[7] = velocity;
	data[8] = currentFrame;
	return data;
}

function Xwing::setPosition(pos){
	var i = pos.z;
	var j = pos.x;
	var k = pos.y;
	
	//TODO: controllo di non collisione
	
	FighterPos = pos;
	FighterObj.setPosition(FighterPos);
	
}

function Xwing::increaseSpeed()
{
	if(currentFrame > 0) {
		currentFrame -= FRAME_STEP;
	}
	velocity = (velocity+SPEED_STEP<MAX_SPEED)?velocity+SPEED_STEP:MAX_SPEED;
}

function Xwing::decreaseSpeed()
{
	if(currentFrame < 20) {
		currentFrame += FRAME_STEP;
	}
	velocity = (velocity-SPEED_STEP>MIN_SPEED)?velocity-SPEED_STEP:MIN_SPEED;
}

function Xwing::setSpeed(speed)
{
	if (speed >= MIN_SPEED && speed <= MAX_SPEED) {
		velocity = speed;
	}
}

function Xwing::setAnimationFrame(frame_number)
{
	currentFrame = frame_number;
}

function Xwing::setAngle(r, p, y)
{
	rollDelta = r - roll;
	pitchDelta = p - pitch;
	yawDelta = y - yaw;
}

function Xwing::setRelativeAngle(r, p, y)
{
	rollDelta = r;
	pitchDelta = p;
	yawDelta = y;
}

function Xwing::draw(){
	/*---only for debug purpose---*/
	FighterObj.DrawAxis();
	FighterObj.DrawBoundingBox();
	
	FighterObj.draw(VR_FRAMENUMBER, currentFrame);
}

function Xwing::update() {
	static var time = GetTime();
	var timeTickSecond = 0.001;
	var cameraPos;
	var direction;
	var displacement;
	timeTickSecond *= (GetTime() - time);

	/*---rotazione oggetto---*/
	FighterObj.Rotate(pitchDelta, [1,0,0]);
	FighterObj.Rotate(yawDelta, [0,1,0]);
	FighterObj.Rotate(rollDelta, [0,0,1]);
	pitch = (pitch + pitchDelta) % 360;
	yaw = (yaw + yawDelta) % 360;
	roll = (roll + rollDelta) % 360;
	pitchDelta = 0;
	yawDelta = 0;
	rollDelta = 0;
	
	/*---settaggio direzione e posizione--- */
	direction = FighterObj.GetZaxis();
	displacement = velocity * timeTickSecond;
	setPosition(FighterPos+displacement*direction);
	
	/* Camera and light position and pose */
	if (withCamera == true) {
		if (cameraMode == 0) {
			cameraPos = FighterObj.getPosition() + FighterObj.getYaxis()*10 + FighterObj.getZaxis()*(-60);
		} else {
			cameraPos = FighterObj.getPosition() + FighterObj.getYaxis()*2.8 + FighterObj.getZaxis()*(-2.8);
		}
		camera.setPosition(cameraPos);
		camera.setUpVector(FighterObj.GetYaxis());
		camera.setDirection(direction);
		
		light.setPosition(cameraPos);
	}
	
	time = GetTime();
}

